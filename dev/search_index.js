var documenterSearchIndex = {"docs":
[{"location":"representation/#Representation-of-tropical-numbers","page":"Representation of tropical numbers","title":"Representation of tropical numbers","text":"","category":"section"},{"location":"representation/","page":"Representation of tropical numbers","title":"Representation of tropical numbers","text":"using TPLib","category":"page"},{"location":"representation/","page":"Representation of tropical numbers","title":"Representation of tropical numbers","text":"A tropical number is an element of MaxPlus{T} or MinPlus{T} where T is a numeric type. These types are a subtype of the abstract type SemiRing{T}, which is itself a subtype of Number. They have a single field defined as the union Union{T,Infinite} where Infinite is a constant type without field representing the infinite element of the tropical ring,","category":"page"},{"location":"representation/","page":"Representation of tropical numbers","title":"Representation of tropical numbers","text":" struct Infinite<:Number end","category":"page"},{"location":"representation/","page":"Representation of tropical numbers","title":"Representation of tropical numbers","text":"The unique element of this type is denoted ∞, and is displayed as cdot in the REPL.","category":"page"},{"location":"representation/","page":"Representation of tropical numbers","title":"Representation of tropical numbers","text":"∞\ntypeof(∞)","category":"page"},{"location":"representation/","page":"Representation of tropical numbers","title":"Representation of tropical numbers","text":"In the case where the numeric type has an infinite element, it will be equal to ∞.","category":"page"},{"location":"representation/","page":"Representation of tropical numbers","title":"Representation of tropical numbers","text":"MaxPlus{Float64}(∞) == -Inf\nMaxPlus{Float64}(-Inf) == ∞\nMinPlus{Float64}(Inf) == ∞","category":"page"},{"location":"representation/","page":"Representation of tropical numbers","title":"Representation of tropical numbers","text":"In this last example, the comparison of ∞ to an element of type MaxPlus forced its conversion to an element of type MaxPlus. In general, ∞ can be either of type MaxPlus or MinPlus, allowing for some flexibility.","category":"page"},{"location":"representation/","page":"Representation of tropical numbers","title":"Representation of tropical numbers","text":"∞ == -Inf\nV = [∞,0,-3,5,∞,-8]\nconvert(Vector{MaxPlus{Int64}},V)\nconvert(Vector{MinPlus{Int64}},V)","category":"page"},{"location":"representation/","page":"Representation of tropical numbers","title":"Representation of tropical numbers","text":"The field of a type SemiRing{T} is accessed through the function elt.","category":"page"},{"location":"representation/","page":"Representation of tropical numbers","title":"Representation of tropical numbers","text":"a = MaxPlus(3)\nelt(a)\nb = MaxPlus{Int64}(∞)\nelt(a)","category":"page"},{"location":"representation/","page":"Representation of tropical numbers","title":"Representation of tropical numbers","text":"To construct an element of MaxPlus{T} or MinPlus{T}, you can either use the constructor without precising the type, in which case the type will be inferred from the element, or you can precise the type of the semiring, in which case the element will be converted.","category":"page"},{"location":"usage/#Using-TPLib","page":"Usage","title":"Using TPLib","text":"","category":"section"},{"location":"usage/","page":"Usage","title":"Usage","text":"using TPLib","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"DocTestSetup = quote\n    using TPLib\nend","category":"page"},{"location":"usage/#Representing-tropical-numbers","page":"Usage","title":"Representing tropical numbers","text":"","category":"section"},{"location":"usage/","page":"Usage","title":"Usage","text":"Tropical elements are represented as the type MaxPlus{T} or MinPlus{T} where {T <: Number} depending on wether they are elements of the max-plus semiring (mathbbR cup -inftymax+) or the min-plus semiring (mathbbR cup +inftymin+). The types MaxPlus{T} and MinPlus{T} are both subtypes of SemiRing{T}. They contain a field accessible through the function elt which is either an element of T, or an element of type Infinite representing the tropical zero. This element is denoted ∞ in both tropical semirings, and is displayed · in the REPL. The function isinfinite(x) returns true if x is the tropical zero of the field.","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"Tropical elements are constructed either by providing explicitely the type MaxPlus{T}(x) or MinPlus{T}(x), in which case x is converted to type T or to ∞ (the latter is done even if x is an infinite element which cannot be converted to type T, for instance MaxPlus{Int64}(-Inf)), or simply with MaxPlus(x) or MinPlus(x), in which case T is inferred from the type of x.","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"julia> MaxPlus(4.)\n4.0\njulia> MinPlus{Rational}(5)\n5//1\njulia> MaxPlus{Int64}(-Inf) == MaxPlus{Int64}(∞)\ntrue","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"Addition + and multiplication * of elements of type SemiRing{T} are the tropical operations max/min and + respectively. Conversion between elements of type SemiRing{T} and of type T or Infinite is done automatically. ","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"julia> MaxPlus(4.) + MaxPlus(-6)\n4.0\njulia> MinPlus(6.) * 4\n10.0\njulia> MaxPlus(8//3) * -Inf == MaxPlus{Rational}(∞)\ntrue","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"The rest of the guide will use mostly the max-plus semiring. The arguments of all functions can be arrays of type SemiRing{T}, in which case the tropical operation + will be infered from the type of the semiring, or can be arrays of type T<:Number. In this case, an additional argument can be given, either :max or :min, to specify if the conversion should be done towards MaxPlus{T} or MinPlus{T}. Otherwise, it defaults to :max.","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"I = [3 ∞ 5 4 2 ∞]\ncompute_ext_rays(I,3)\ncompute_ext_rays(I,3,:min)\ncompute_ext_rays(convert(Matrix{MaxPlus{Int64}},I),3)","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"You could also write -Inf instead of ∞ in I for the max-plus ring, or Inf for the min-plus ring. This however would change the type of I to Matrix{Float64}, and therefore the result would be of type Matrix{MaxPlus{Float64}} instead of Matrix{MaxPlus{Int64}}.","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"I = [3 -Inf 5 4 2 -Inf]\ncompute_ext_rays(I,3)","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"To prevent this, you can convert beforehand the matrix I to the type Matrix{MaxPlus{Int64}}. The -Inf will be converted to ∞.","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"convert(Matrix{MaxPlus{Int64}}, I)","category":"page"},{"location":"usage/#Compute-rays-of-a-tropical-cone","page":"Usage","title":"Compute rays of a tropical cone","text":"","category":"section"},{"location":"usage/","page":"Usage","title":"Usage","text":"Given a tropical cone in mathbbT^n described by the inequalities  max(a_i1 + x_1 dots a_in + x_n) geqslant max(b_i1 + x_1 dots b_in + x_n) for i in m regrouped in the matrix I with m rows and 2ncolumns, the function compute_ext_rays(I,n) returns a matrix G whose rows are the minimal family of generators of the cone. For example, consider the cone in mathbbT^5 defined by the inequalities","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"max(x_2 + 2 x_3 - 1 x_4 + 4) geqslant max(x_1 + 2 x_2 + 2 x_4 + 4 x_5 + 2) \nmax(x_1 + 1 x_3 + 4 x_4 + 5 x_5 + 4) geqslant max(x_2 + 4 x_4 + 5 x_5 + 4)","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"Then the matrix representation of the system and the computation are as follows:","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"I = [∞ 2 -1 4 ∞ 2 2 ∞ 4 2;\n    1 ∞ 4 5 4 ∞ 4 ∞ 5 4]\ncompute_ext_rays(I,5)","category":"page"},{"location":"usage/#Compute-rays-of-the-tropical-polar-cone","page":"Usage","title":"Compute rays of the tropical polar cone","text":"","category":"section"},{"location":"usage/","page":"Usage","title":"Usage","text":"Specifying a cone by a set of generators M in dimension n, the function compute_ext_rays_polar(M,n) returns the generators of the tropical polar cone. For example, consider the cone in mathbbT^5 which is the tropical cone generated by","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"operatornametcone(v_1 v_2 v_3) ","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"textwhere  v_1 = beginpmatrix -infty  4  2  3  4 endpmatrix v_2 = beginpmatrix 4  -infty  -5  4  -1 endpmatrix v_3 = beginpmatrix -infty  -infty  2  3  -1 endpmatrix","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"The generators are represented as the matrix","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"M = [∞ 4 2 3 4; 4 ∞ -5 4 -1; ∞ ∞ 2 3 -1]\ncompute_ext_rays_polar(M,5)","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"Because of the absence of a minus operation for tropical numbers, the polar of a cone in mathbbT^n lies in mathbbT^2n, therefore the output of the function is a matrix with 2n columns.","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"As another example, we can compute a minimal family of generators of a tropical cone by computing generators of the tropical polar cone, which are equations for the halfspaces defining the tropical cone, and then computing the rays of the tropical cone using these equations. For example, consider the tropical cone in mathbbT^3 defined by the generators","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"operatornametcone(v_1 v_2 v_3 v_4 v_5)","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"textwhere  v_1 = beginpmatrix 0  4  0 endpmatrix  v_2 = beginpmatrix 0  3  4 endpmatrix   v_3 = beginpmatrix 0  0  2 endpmatrix   v_4 = beginpmatrix 0  4  2 endpmatrix   v_5 = beginpmatrix 0  3  3 endpmatrix ","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"Drawing the projection of the tropical cone in mathbbP^2, we clearly see that it is equal to operatornametcone(v_1 v_2 v_3).","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"(Image: img)","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"Indeed, we have the computation","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"M = [0 4 0; 0 3 4; 0 0 2; 0 4 2; 0 3 3]\ncompute_ext_rays(compute_ext_rays_polar(M,3),3)","category":"page"},{"location":"usage/#Compute-halfspaces","page":"Usage","title":"Compute halfspaces","text":"","category":"section"},{"location":"usage/","page":"Usage","title":"Usage","text":"Given a tropical cone defined by a generating set M in dimension n, compute_halfspaces(M,n) returns a representation of the cone by means of sectors of halfspaces. A halfspace give by the row h_i1 dots h_in and the set of sectors J is the subset defined by the inequality","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":" max_j in J(x_j - h_ij) geqslant max_j in n setminus J(x_j - h_ij)","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"The point (h_i1 dots h_in) is called the apex of the the halfspace. Considering the same tropical cone as the previous example with its minimal family of generators,","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"operatornametcone(v_1 v_2 v_3)","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"textwhere  v_1 = beginpmatrix 0  4  0 endpmatrix  v_2 = beginpmatrix 0  3  4 endpmatrix   v_3 = beginpmatrix 0  0  2 endpmatrix ","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"From the drawing above, we see that the tropical polytope is defined by five halfspaces, with apexes (002), (012), (044), (042), and (040). Indeed, the compuation gives","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"M = [0 4 0; 0 3 4; 0 0 2]\nshow(stdout, \"text/plain\", compute_halfspaces(M,3))","category":"page"},{"location":"usage/#Compute-tropical-complex","page":"Usage","title":"Compute tropical complex","text":"","category":"section"},{"location":"usage/","page":"Usage","title":"Usage","text":"Given a tropical cone defined by a generating set M in dimension n, compute_tropical_complex(M,n) returns the tropical complex associated with the tropical cone, meaning a set of vertices and a set of maximal cells defined by their adjacency with the vertices. These cells give a decomposition of the tropical polytope in a polyhedral complex.","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"Returning to our example","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"operatornametcone(v_1 v_2 v_3)","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"textwhere  v_1 = beginpmatrix 0  4  0 endpmatrix  v_2 = beginpmatrix 0  3  4 endpmatrix   v_3 = beginpmatrix 0  0  2 endpmatrix ","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"this tropical cone can be decomposed in three maximal cells, the full dimensional one whose vertices are (012), (034), (044), and (042), as well as the two segments joining (002) to (012) and (040) to (042). The computation yields","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"M = [0 4 0; 0 3 4; 0 0 2]\nshow(stdout, \"text/plain\", compute_tropical_complex(M,3))","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"Here is a more complex example. On the figure, the orange vertices are the tropical vertices of the tropical polytope. They form, along with the red vertices, the vertices of the polyhedral complex.","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"M = [0 24 95; 0 41 -9; 0 56 27; 0 64 50; 0 10 -67; 0 -17 -16; 0 -23 44]\nshow(stdout, \"text/plain\", compute_tropical_complex(M,3))","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"(Image: img)","category":"page"},{"location":"usage/#Compute-tangent-hypergraph","page":"Usage","title":"Compute tangent hypergraph","text":"","category":"section"},{"location":"usage/","page":"Usage","title":"Usage","text":"The tangent hypergraph of a tropical cone in dimension n at point P can be computed using the function compute_tangent_hypergraph. If the tropical cone is defined by a system of inequalities I or by generators M, then the usage is","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"compute_tangent_hypergraph(I,P,n)\ncompute_tangent_hypergraph(M,P,n)","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"If the cone is defined by a a system of halfspaces H and their sectors A, then the usage is","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"compute_tangent_hypergraph(H,A,P,n)","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"The function returns a tuple containing the number of vertices of the hypergraph, its hyperedges, and in the case where it is called with inequalities or halfspaces, then it also returns the inequalities or halfspaces associated with each halfspace.","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"H = [0 1 4 8; 0 3 6 10; 0 3 7 11; 0 3 7 11; 0 4 8 12; 0 1 5 9; 0 1 2 6; 0 1 2 3; 0 1 3 5; 0 1 2 4; 0 1 2 4; 0 1 3 7; 0 2 4 7; 0 2 5 9; 0 1 3 6]\nA = [[2, 4], [1, 4], [1, 3], [1, 4], [1], [2], [3], [4], [1, 4], [1, 4], [2, 4], [1, 3], [1, 4], [1, 3], [2, 4]]\nP = [0, 2, 5, 8]\nshow(stdout, \"text/plain\", compute_tangent_hypergraph(H,A,P,4))","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"I = [-Inf 0 -Inf 1 -Inf -Inf; -Inf -4 -3 0 -Inf -Inf; -Inf -Inf -1 0 -6 -Inf; 0 -Inf -Inf -Inf -Inf -4; 0 -8 -Inf -Inf -Inf -3]\nP = [0, 1, 3]\nshow(stdout, \"text/plain\", compute_tangent_hypergraph(I,P,3))","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"M =  [0 1 3; 0 4 1; 0 9 4]\nP = [0, 1, 3]\nshow(stdout, \"text/plain\", compute_tangent_hypergraph(M,P,3))","category":"page"},{"location":"usage/#References","page":"Usage","title":"References","text":"","category":"section"},{"location":"usage/","page":"Usage","title":"Usage","text":"The algorithms implemented in TPLib are bases on the following papers.","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"[1] X. Allamigeon. Static analysis of memory manipulations by abstract interpretation – Algorithmics of tropical polyhedra, and application to abstract interpretation. PhD thesis. ","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"[2] X. Allamigeon, S. Gaubert, E. Goubault. Computing the vertices of tropical polyhedra using directed hypergraphs. Discrete & Computational Geometry, 49(2):247–279, 2013. E-print arXiv:0904.3436v4.","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"[3] X. Allamigeon, S. Gaubert, and R. D. Katz. Tropical polar cones, hypergraph transversals, and mean payoff games. Linear Algebra Appl., 435(7):1549–1574, 2011. E-print arXiv:1004.2778.","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"[4] X. Allamigeon and R.D. Katz. Minimal external representations of tropical polyhedra. Journal of Combinatorial Theory, Series A, 120(4):907–940, 2013.  Eprint arXiv:1205.6314.","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"[5] X. Allamigeon, S. Gaubert, E. Goubault. Inferring Min and Max Invariants Using Max-plus Polyhedra. Proceedings of the 15th International Static Analysis Symposium (SAS'08). ","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"[6] M. Develin and B. Sturmfels. Tropical convexity. Doc. Math., 9:1–27 (electronic), 2004. E-print arXiv:math.MG/0308254.","category":"page"},{"location":"installation/#Installation","page":"Installation","title":"Installation","text":"","category":"section"},{"location":"installation/","page":"Installation","title":"Installation","text":"TPLib.jl is a binding to the library TPLib written in OCaml. You must therefore install the library on your system. You can download it here and build it from source:","category":"page"},{"location":"installation/","page":"Installation","title":"Installation","text":"./configure\nmake\nmake install","category":"page"},{"location":"installation/","page":"Installation","title":"Installation","text":"You can also install it with the OCaml package manager OPAM:","category":"page"},{"location":"installation/","page":"Installation","title":"Installation","text":"opam install tplib","category":"page"},{"location":"installation/","page":"Installation","title":"Installation","text":"Computing with Rationals or BigInts requires the zarith package for OCaml. It can be installed using OPAM:","category":"page"},{"location":"installation/","page":"Installation","title":"Installation","text":"opam install zarith","category":"page"},{"location":"reference/#Reference","page":"Reference","title":"Reference","text":"","category":"section"},{"location":"reference/#Representation-of-tropical-numbers","page":"Reference","title":"Representation of tropical numbers","text":"","category":"section"},{"location":"reference/","page":"Reference","title":"Reference","text":"MaxPlus\nMinPlus\nelt\nisinfinite\nBase.:(==)\nBase.:(+)\nBase.:(*)\nBase.isless","category":"page"},{"location":"reference/#TPLib.Tropical.MaxPlus","page":"Reference","title":"TPLib.Tropical.MaxPlus","text":"MaxPlus{T}(x::Number) where {T<:Number}\nMaxPlus(x::Number)\n\nConstructor for the type MaxPlus. If a type T is given, x is converted to that type, otherwise the type is inferred from x.\n\n\n\n\n\n","category":"type"},{"location":"reference/#TPLib.Tropical.MinPlus","page":"Reference","title":"TPLib.Tropical.MinPlus","text":"MinPlus{T}(x::Number) where {T<:Number}\nMinPlus(x::Number)\n\nConstructor for the type MinPlus. If a type T is given, x is converted to that type, otherwise the type is inferred from x.\n\n\n\n\n\n","category":"type"},{"location":"reference/#TPLib.Tropical.elt","page":"Reference","title":"TPLib.Tropical.elt","text":"elt(x::SemiRing)\n\nReturns the tropical element.\n\n\n\n\n\n","category":"function"},{"location":"reference/#TPLib.Tropical.isinfinite","page":"Reference","title":"TPLib.Tropical.isinfinite","text":"isinfinite(x::SemiRing)\n\nReturns true if x is the infinite element of the tropical field (ie the tropical 0), false otherwise.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Base.:==","page":"Reference","title":"Base.:==","text":"Base.:(==)(x::S,y::S) where {S<:SemiRing}\n\nEquality of tropical numbers.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Base.:+","page":"Reference","title":"Base.:+","text":"Base.:(+)(x::S,y::S) where {S<:SemiRing}\n\nAddition of tropical numbers.\n\nExample\n\njulia> using TPLib\n\njulia> MaxPlus(3) + MaxPlus(8)\n8\n\njulia> MinPlus(4.) + MinPlus{Int64}(∞)\n4.0\n\njulia> MaxPlus(6.2) + 4\n6.2\n\n\n\n\n\n","category":"function"},{"location":"reference/#Base.:*","page":"Reference","title":"Base.:*","text":"Base.:(*)(x::S,y::S) where {S<:SemiRing}\n\nMultiplication of tropical numbers.\n\nExample\n\njulia> using TPLib\n\njulia> MaxPlus(4) * MaxPlus(8)\n12\n\njulia> MinPlus(2) * MinPlus(-3.5)\n-1.5\n\njulia> MaxPlus(10.0) * -Inf\n⋅\n\n\n\n\n\n","category":"function"},{"location":"reference/#Base.isless","page":"Reference","title":"Base.isless","text":"Base.isless(x::S,y::S) where {S<:SemiRing}\n\nComparison of tropical numbers.\n\n\n\n\n\n","category":"function"},{"location":"reference/#TPLib","page":"Reference","title":"TPLib","text":"","category":"section"},{"location":"reference/","page":"Reference","title":"Reference","text":"compute_ext_rays\ncompute_ext_rays_polar\ncompute_halfspaces\ncompute_tropical_complex\ncompute_tangent_hypergraph","category":"page"},{"location":"reference/#TPLib.compute_ext_rays","page":"Reference","title":"TPLib.compute_ext_rays","text":"compute_ext_rays(I::Matrix{<:SemiRing}, n::Integer)\ncompute_ext_rays(I::Matrix{<:Number}, n::Integer, semiring=:max)\n\nComputes the set of the extreme rays of a tropical cone given by the inequalities I in dimension n, see [3]. Each row of I contains 2n coefficients. When written a_i1  dots  a_in  b_i1  dots  b_in, they represent the tropical inequality \n\nmax(a_i1 + x_1 dots a_in + x_n) geqslant max(b_i1 + x_1 dots b_in + x_n)\n\nIf the coefficients of I have type MaxPlus{T} or MinPlus{T}, then the computations are done in the max-plus or min-plus tropical semirings respectively. Otherwise, you can specify wether the coefficients should be converted to the semiring :max or :min. Returns a matrix G::Matrix{<:SemiRing} in which every line is a tropical point generating the cone.\n\nReferences\n\n[1] X. Allamigeon. Static analysis of memory manipulations by abstract interpretation – Algorithmics of tropical polyhedra, and application to abstract interpretation. PhD thesis. \n\n[2] X. Allamigeon, S. Gaubert, E. Goubault. Computing the vertices of tropical polyhedra using directed hypergraphs. Discrete & Computational Geometry, 49(2):247–279, 2013. E-print arXiv:0904.3436v4.\n\n\n\n\n\n","category":"function"},{"location":"reference/#TPLib.compute_ext_rays_polar","page":"Reference","title":"TPLib.compute_ext_rays_polar","text":"compute_ext_rays_polar(M::Matrix{<:SemiRing}, n::Integer)\ncompute_ext_rays_polar(M::Matrix{<:Number}, n::Integer, semiring=:max)\n\nComputes the set of the extreme rays of the polar of a tropical cone given by a generating set M in dimension n, see [3]. Each row of M contains n coefficients and represents a generator of the tropical cone. If the coefficients of M have type MaxPlus{T} or MinPlus{T}, then the computations are done in the max-plus or min-plus tropical semirings respectively. Otherwise, you can specify wether the coefficients should be converted to the semiring :max or :min. Returns a matrix ::Matrix{<:SemiRing} in which every row is a tropical point generating the polar cone.\n\nReferences\n\n[1] X. Allamigeon, S. Gaubert, and R. D. Katz. Tropical polar cones, hypergraph transversals, and mean payoff games. Linear Algebra Appl., 435(7):1549–1574, 2011. E-print arXiv:1004.2778.\n\n\n\n\n\n","category":"function"},{"location":"reference/#TPLib.compute_halfspaces","page":"Reference","title":"TPLib.compute_halfspaces","text":"compute_halfspaces(M::Matrix{<:SemiRing}, n::Integer)\ncompute_halfspaces(M::Matrix{<:Number}, n::Integer, semiring=:max)\n\nComputes a minimal external representation by means of tropical half-spaces of a tropical cone given by a generating set M in dimension n, see [4]. The set of generators must be nonempty, ie M cannot be empty. It currently handles only the case of generating sets in which every vector has finite entries. Returns a pair (H::Matrix{<:SemiRing},A::Vector{Vector{Integer}}) where the rows of H are the equations for the tropical half-spaces and the vectors of A are the sectors of each half-space. \n\nReferences\n\n[1] X. Allamigeon and R.D. Katz. Minimal external representations of tropical polyhedra. Journal of Combinatorial Theory, Series A, 120(4):907–940, 2013.  Eprint arXiv:1205.6314.\n\n\n\n\n\n","category":"function"},{"location":"reference/#TPLib.compute_tropical_complex","page":"Reference","title":"TPLib.compute_tropical_complex","text":"compute_tropical_complex(M::Matrix{<:SemiRing}, n::Integer)\ncompute_tropical_complex(M::Matrix{<:Number}, n::Integer, semiring=:max)\n\nComputes the tropical complex associated with a tropical cone given by a generating set. Only generating sets which are minimal and in which every vector has finite entries are supported. Returns a pair (V::Matrix{<:Number},A::Vector{Vector{Int64}}) where the rows of V are the vertices of the complex, and A is the collection of maximal cells (defined by adjacency with vertices). Note that each cell is seen as a usual polytope, and not as a tropical one, and that the vertices are not necessarily unique.\n\nReferences\n\n[1] M. Develin and B. Sturmfels. Tropical convexity. Doc. Math., 9:1–27 (electronic), 2004. E-print arXiv:math.MG/0308254.\n\n\n\n\n\n","category":"function"},{"location":"reference/#TPLib.compute_tangent_hypergraph","page":"Reference","title":"TPLib.compute_tangent_hypergraph","text":"compute_tangent_hypergraph(M::Matrix{<:SemiRing}, P::Vector{<:SemiRing}, n::Integer)\ncompute_tangent_hypergraph(H::Matrix{<:SemiRing}, A::Vector{Vector{Int64}},  P::Vector{<:SemiRing}, n::Integer) \ncompute_tangent_hypergraph(M::Matrix{<:Number}, P::Vector{<:Number}, n::Integer, semiring=:max)\ncompute_tangent_hypergraph(H::Matrix{<:Number}, A::Vector{Vector{Int64}},  P::Vector{<:Number}, n::Integer, semiring=:max)\n\nComputes the tangent directed hypergraph of a point P in a tropical cone specified by its generators or inequalities M (the difference is made by wether M is composed of n or 2n columns) or by halfspaces H with their sectors A. Returns the number of vertices of the hypergraph, its hyperedges, and in the case where M was specified by inequalities or halfspaces, then the active inequalities or halfspaces associated to the hyperedges. Note that the vertices of the hypergraph are labeled starting at 1, whereas they are labeled starting at 0 in TPLib.\n\nReferences\n\n[1] X. Allamigeon. Static analysis of memory manipulations by abstract interpretation – Algorithmics of tropical polyhedra, and application to abstract interpretation. PhD thesis. \n\n[2] X. Allamigeon, S. Gaubert, E. Goubault. Computing the vertices of tropical polyhedra using directed hypergraphs. Discrete & Computational Geometry, 49(2):247–279, 2013. E-print arXiv:0904.3436v4.\n\n\n\n\n\n","category":"function"},{"location":"#TPLib.jl:-Tropical-Polyhedra-Library","page":"Home","title":"TPLib.jl: Tropical Polyhedra Library","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"TPLib.jl is a binding to the library TPLib which implements several algorithms to manipulate tropical polyhedra. Among others, it allows to compute:","category":"page"},{"location":"","page":"Home","title":"Home","text":"the extreme points and rays of tropical polyhedra, \ntropical polar cones,\nthe minimal representations by means of half-spaces,\nthe tropical complex associated with a tropical polytope.","category":"page"},{"location":"#Copyright-notice-for-TPLib","page":"Home","title":"Copyright notice for TPLib","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Published under LGPL2.1","category":"page"},{"location":"","page":"Home","title":"Home","text":"Copyright (C) 2009-2013 Xavier ALLAMIGEON (xavier.allamigeon at inria.fr)","category":"page"},{"location":"","page":"Home","title":"Home","text":"Version 1.0 of TPLib  when the author was at EADS Innovation Works, with the support of the programme of the French National Agency of Research (ANR), project ``ASOPT'', number ANR-08-SEGI-005.","category":"page"}]
}
